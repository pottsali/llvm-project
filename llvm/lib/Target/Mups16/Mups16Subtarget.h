//===-- Mups16Subtarget.h - Define Subtarget for the Mups16 ----*- C++ -*--===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the Mups16 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_MUPS16_MUPS16SUBTARGET_H
#define LLVM_LIB_TARGET_MUPS16_MUPS16SUBTARGET_H

#include "Mups16FrameLowering.h"
#include "Mups16ISelLowering.h"
#include "Mups16InstrInfo.h"
#include "Mups16RegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "Mups16GenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class Mups16Subtarget : public Mups16GenSubtargetInfo
{
    virtual void anchor();
    bool ExtendedInsts = false;
    Mups16FrameLowering FrameLowering;
    Mups16InstrInfo InstrInfo;
    Mups16TargetLowering TLInfo;
    SelectionDAGTargetInfo TSInfo;

public:
    /// This constructor initializes the data members to match that
    /// of the specified triple.
    ///
    Mups16Subtarget(const Triple &TT, const std::string &CPU,
                    const std::string &FS, const TargetMachine &TM);

    /// ParseSubtargetFeatures - Parses features string setting specified
    /// subtarget options.  Definition of function is auto generated by tblgen.
    void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

    const TargetFrameLowering *getFrameLowering() const override
    {
        return &FrameLowering;
    }
    const Mups16InstrInfo *getInstrInfo() const override
    { 
        return &InstrInfo;
    }
    const TargetRegisterInfo *getRegisterInfo() const override
    {
        return &InstrInfo.getRegisterInfo();
    }
    const Mups16TargetLowering *getTargetLowering() const override
    {
        return &TLInfo;
    }
    const SelectionDAGTargetInfo *getSelectionDAGInfo() const override 
    {
        return &TSInfo;
    }
};
} // End llvm namespace

#endif  // LLVM_TARGET_MUPS16_SUBTARGET_H
